executor: default
parameters:
  dockerfile:
    description:
      The Dockerfile name you want to use to build the preview conainer.
      Most of the times you don't need to worry about this, the default
      should be just fine.
    type: string
    default: Dockerfile
  domain:
    description:
      The domain that will serve previews. It should be the domain of your
      previews without the subdomain part (domain.com and not *.domain.com).
    type: string
  fetch_seed_data_command:
    description:
      The command that will fetch/retrieve seed data somewhere and put it
      where it can be found by the Dockerfile so that it can load the
      initial container seed data.
    type: string
    default: cp ../dump.sql .
  fresh_containers_count:
    description:
      The maximum number of containers that you want running for the
      application that runs the containers. CircleCI will remove any
      container exceeding this number (starting with the older ones).
    type: integer
    default: 10
  github_repo:
    description:
      The GitHub repository that needs to be notified. Should be in the form
      organization/repo.
    type: string
  github_token:
    description:
      The OAuth token for the GitHub that will notify deploys on PRs.
    type: string
  letsencrypt_email:
    description:
      The email for the SSL certificate generated by Letsencrypt for your
      containers.
    type: string
  server:
    description:
      The server that runs Docker and will host all your preview containers.
    type: string
  user:
    description:
      The user that will be used to connect to the preview server.
    type: string
steps:
  - checkout
  - add_ssh_keys
  - run:
      name: Add Docker Server To Known SSH Hosts
      command: ssh-keyscan -H << parameters.server >> >> ~/.ssh/known_hosts
  - run:
      name: Set Feature Branch Name
      command: |
        echo "export BRANCH=`echo $CIRCLE_BRANCH | sed \"s/[^[:alnum:]]/-/g\" | tr '[:upper:]' '[:lower:]'`" > $CIRCLE_BUILD_NUM
        echo "export SUBDOMAIN=`echo $CIRCLE_BRANCH | shasum  | awk '{print $1}' | head -c 6`" >> $CIRCLE_BUILD_NUM
        echo "export CONTAINER=$CIRCLE_PROJECT_REPONAME-\$BRANCH" >> $CIRCLE_BUILD_NUM
        echo "export DIRECTORY=$CIRCLE_PROJECT_REPONAME/\$BRANCH" >> $CIRCLE_BUILD_NUM
  - run:
      name: Write Preview URL to a persisted file
      command: |
        source $CIRCLE_BUILD_NUM
        mkdir -p workspace
        echo "https://$SUBDOMAIN.<< parameters.domain >>" > workspace/preview-url
  - run:
      name: Notify Preview Deploy Started
      command: |
        source $CIRCLE_BUILD_NUM
        curl \
          -X POST \
          -H "Content-Type: application/json" \
          -H "Accept: application/vnd.github.ant-man-preview+json" \
          -H "Authorization: token << parameters.github_token >>" \
          "https://api.github.com/repos/<< parameters.github_repo >>/deployments" \
          -d '{ "ref": "'$CIRCLE_SHA1'", "auto_merge": false, "required_contexts": [], "environment": "preview", "transient_environment": true }' | \
        grep '"id"' | head -1 | awk '{gsub(/,/,""); print $2}' > github_deploy_id
  - run:
      name: Upload Application To Docker Server
      command: |
        source $CIRCLE_BUILD_NUM
        ssh << parameters.user >>@<< parameters.server >> "mkdir -p $DIRECTORY"
        tar c . | ssh << parameters.user >>@<< parameters.server >> "tar xC $DIRECTORY"
  - run:
      name: Build Docker Image On Docker Server
      command: |
        source $CIRCLE_BUILD_NUM
        ssh << parameters.user >>@<< parameters.server >> "\
        cd $DIRECTORY && << parameters.fetch_seed_data_command >> && \
        docker build \
        --label \"pull-request=${CIRCLE_PULL_REQUEST##*/}\" \
        --label \"branch=$CIRCLE_BRANCH\" \
        --label \"subdomain=$SUBDOMAIN\" \
        -t $CONTAINER \
        --build-arg SUBDOMAIN=$SUBDOMAIN \
        --file=<< parameters.dockerfile >> ."
        ssh << parameters.user >>@<< parameters.server >> "rm -fr $DIRECTORY"
  - run:
      name: Run Docker Container On Docker Server
      command: |
        source $CIRCLE_BUILD_NUM
        ssh << parameters.user >>@<< parameters.server >> "\
        docker rm -f $CONTAINER; \
        docker run -d --restart always --name $CONTAINER \
        -e VIRTUAL_HOST=$SUBDOMAIN.<< parameters.domain >> \
        -e LETSENCRYPT_HOST=$SUBDOMAIN.<< parameters.domain >> \
        -e LETSENCRYPT_EMAIL=<< parameters.letsencrypt_email >> \
        -e GIT_BRANCH=$CIRCLE_BRANCH \
        $CONTAINER"
  - run:
      name: Notify Preview Deploy Complete
      command: |
        source $CIRCLE_BUILD_NUM
        curl \
          -X POST \
          -H "Content-Type: application/json" \
          -H "Accept: application/vnd.github.ant-man-preview+json" \
          -H "Authorization: token << parameters.github_token >>" \
          "https://api.github.com/repos/<< parameters.github_repo >>/deployments/`cat github_deploy_id`/statuses" \
          -d '{ "state": "success", "environment_url": "https://'$SUBDOMAIN'.<< parameters.domain >>/", "environment": "preview" }'
  - run:
      name: Cleanup Old Containers
      command: |
        set +e
        ssh << parameters.user >>@<< parameters.server >> "docker ps --format "{{.Names}}" --filter "name=$CIRCLE_PROJECT_REPONAME" | tail +$((<< parameters.fresh_containers_count >> + 1))" > old_containers
        if [ -s old_containers ]; then ssh << parameters.user >>@<< parameters.server >> "docker rm -f "`cat old_containers`""; fi
  - persist_to_workspace:
      root: workspace
      paths:
        - preview-url
