# This code is licensed from CircleCI to the user under the MIT license. See
# https://circleci.com/orbs/registry/licensing for details.
version: 2.1
description:
  An Orb that can be used to connect via SSH to a remote server running a Docker
  daemon to spin up containers that serve preview apps with code taken from
  GitHub PRs.

examples:
  feature-branch-preview:
    description: |
      Use the feature-branch-preview Orb to implement a preview server that will
      use a pre-configured docker server to run your application containers.
    usage:
      version: 2.1
      orbs:
        feature-branch: nebulab/feature-branch-preview
      workflows:
        cool-workflow:
          jobs:
          - feature-branch/preview:
              domain: <domain-for-preview-apps>
              github_repo: <your-github-repository>
              github_token: <your-gh-auth-token>
              letsencrypt_email: <email-for-ssl-cert>
              server: <docker-server-to-run-containers>
              user: <docker-server-user>

executors:
  default:
    docker:
      - image: circleci/ruby

jobs:
  preview:
    executor: default
    parameters:
      dockerfile:
        description:
          The Dockerfile name you want to use to build the preview conainer.
          Most of the times you don't need to worry about this, the default
          should be just fine.
        type: string
        default: Dockerfile
      domain:
        description:
          The domain that will serve previews. It should be the domain of your
          previews without the subdomain part (domain.com and not *.domain.com).
        type: string
      fetch_seed_data_command:
        description:
          The command that will fetch/retrieve seed data somewhere and put it
          where it can be found by the Dockerfile so that it can load the
          initial container seed data.
        type: string
        default: cp ../dump.sql .
      fresh_containers_count:
        description:
          The maximum number of containers that you want running for the
          application that runs the containers. CircleCI will remove any
          container exceeding this number (starting with the older ones).
        type: integer
        default: 10
      github_repo:
        description:
          The GitHub repository that needs to be notified. Should be in the form
          organization/repo.
        type: string
      github_token:
        description:
          The OAuth token for the GitHub that will notify deploys on PRs.
        type: string
      letsencrypt_email:
        description:
          The email for the SSL certificate generated by Letsencrypt for your
          containers.
        type: string
      server:
        description:
          The server that runs Docker and will host all your preview containers.
        type: string
      user:
        description:
          The user that will be used to connect to the preview server.
        type: string
    steps:
      - checkout
      - add_ssh_keys
      - run:
          name: Add Docker Server To Known SSH Hosts
          command: ssh-keyscan -H << parameters.server >> >> ~/.ssh/known_hosts
      - run:
          name: Set Feature Branch Name
          command: |
            echo "export BRANCH=`echo $CIRCLE_BRANCH | sed \"s/[^[:alnum:]]/-/g\" | tr '[:upper:]' '[:lower:]'`" > $CIRCLE_BUILD_NUM
            echo "export SUBDOMAIN=`echo $CIRCLE_BRANCH | shasum  | awk '{print $1}' | head -c 6`" >> $CIRCLE_BUILD_NUM
            echo "export CONTAINER=$CIRCLE_PROJECT_REPONAME-\$BRANCH" >> $CIRCLE_BUILD_NUM
            echo "export DIRECTORY=$CIRCLE_PROJECT_REPONAME/\$BRANCH" >> $CIRCLE_BUILD_NUM
      - run:
          name: Notify Preview Deploy Started
          command: |
            source $CIRCLE_BUILD_NUM
            curl -X POST -H "Content-Type: application/json" -H "Accept: application/vnd.github.ant-man-preview+json" \
            "https://api.github.com/repos/<< parameters.github_repo >>/deployments?access_token=<< parameters.github_token >>" \
            -d '{ "ref": "'$CIRCLE_SHA1'", "auto_merge": false, "required_contexts": [], "environment": "preview", "transient_environment": true }' | \
            grep '"id"' | head -1 | awk '{gsub(/,/,""); print $2}' > github_deploy_id
      - run:
          name: Upload Application To Docker Server
          command: |
            source $CIRCLE_BUILD_NUM
            ssh << parameters.user >>@<< parameters.server >> "rm -fr $DIRECTORY && mkdir -p $DIRECTORY"
            tar c . | ssh << parameters.user >>@<< parameters.server >> "tar xC $DIRECTORY"
      - run:
          name: Build Docker Image On Docker Server
          command: |
            source $CIRCLE_BUILD_NUM
            ssh << parameters.user >>@<< parameters.server >> "cd $DIRECTORY && << parameters.fetch_seed_data_command >> && docker build -t $CONTAINER --build-arg SUBDOMAIN=$SUBDOMAIN --file=<< parameters.dockerfile >> ."
      - run:
          name: Run Docker Container On Docker Server
          command: |
            source $CIRCLE_BUILD_NUM
            ssh << parameters.user >>@<< parameters.server >> "\
            docker rm -f $CONTAINER; \
            docker run -d --restart always --name $CONTAINER \
            -e VIRTUAL_HOST=$SUBDOMAIN.<< parameters.domain >> \
            -e LETSENCRYPT_HOST=$SUBDOMAIN.<< parameters.domain >> \
            -e LETSENCRYPT_EMAIL=<< parameters.letsencrypt_email >> \
            $CONTAINER"
      - run:
          name: Notify Preview Deploy Complete
          command: |
            source $CIRCLE_BUILD_NUM
            curl -X POST -H "Content-Type: application/json" -H "Accept: application/vnd.github.ant-man-preview+json" \
            "https://api.github.com/repos/<< parameters.github_repo >>/deployments/`cat github_deploy_id`/statuses?access_token=<< parameters.github_token >>" \
            -d '{ "state": "success", "environment_url": "https://'$SUBDOMAIN'.<< parameters.domain >>/", "environment": "preview"'
      - run:
          name: Cleanup Old Containers
          command: |
            set +e
            ssh << parameters.user >>@<< parameters.server >> "docker ps | grep $CIRCLE_PROJECT_REPONAME | head -n << parameters.fresh_containers_count >>" | awk '{ print $1 }' | tr '\n' '|' | sed 's/|$/\n/' > grep_regex
            ssh << parameters.user >>@<< parameters.server >> "docker ps | grep $CIRCLE_PROJECT_REPONAME | grep -vE '`cat grep_regex`'" | awk '{print $2}' > old_containers
            ssh << parameters.user >>@<< parameters.server >> "docker rm -f "`cat old_containers`""
            ssh << parameters.user >>@<< parameters.server >> "rm -fr "`cat old_containers | sed "s/$CIRCLE_PROJECT_REPONAME-/$CIRCLE_PROJECT_REPONAME\//g"`""
